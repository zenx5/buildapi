{"version":3,"sources":["hooks/form/useUserForm.ts","components/user/DialogUserForm.tsx","views/Users.js","hooks/useDialog.js","hooks/form/useSelectedItem.ts","components/shared/DeleteDialog.tsx"],"names":["schema","userForm","object","first_name","string","required","last_name","is_staff","boolean","username","phone_number","optional","email","img","mixed","password","confirm_password","oneOf","ref","defaultUserFormValues","unique_id","DialogUserForm","open","onClose","form","afterSubmit","user","useAuth","useForm","resolver","yupResolver","defaultValues","resetForm","reset","useUserForm","control","handleSubmit","setValue","useLoading","startLoading","endLoading","isLoading","useToast","showErrorToast","showSuccessToast","onSubmit","data","a","response","usersService","update","add","useEffect","title","fileRef","useRef","Dialog","fullWidth","maxWidth","DialogTitle","DialogContent","Stack","spacing","mt","direction","xs","md","name","render","field","error","fieldState","TextField","label","helperText","message","value","onBlur","onChange","onClick","current","click","contentEditable","hidden","type","target","files","FormGroup","FormControlLabel","Checkbox","defaultChecked","checked","sx","color","marginLeft","disabled","rules","DialogActions","LoadingButton","loading","variant","TOTAL_ADMIN","statusSelect","TABLE_HEAD","id","alignRight","align","options","icon","eyeFill","text","el","action","editFill","trashFill","Users","navigate","useNavigate","useSelectedItem","selectedItem","setData","selectedIndex","handleCloseSelectedItem","handleSelectedItem","handleUpdateItem","handleRemoveItem","useDialog","isOpenFormDialog","isOpenDialog","openFormDialog","openDialog","closeFormDialog","closeDialog","isOpenDeleteDialog","openDeleteDialog","closeDeleteDialog","useState","search","setSeach","statusFilter","setStatusFilter","selected","setSelected","dropdownExport","setDropDownExport","getUsers","list","length","filter","i","deleteItem","delete","handleClose","exportToExcel","sendData","id_users","map","exportUsers","url","window","URL","createObjectURL","Blob","link","document","createElement","href","setAttribute","body","appendChild","exportToPdf","dataToPrint","ID","Name","print","printable","properties","header","style","showModal","filteredData","useMemo","filterData","JSON","stringify","toLowerCase","includes","trim","isTrue","Container","sm","flexWrap","justifyContent","Typography","mb","Box","alignItems","Tooltip","Button","mr","borderRadius","minWidth","py","height","bgcolor","DataTable","defaultSort","handleMoreAction","isSelectable","toolBarSection","p","select","SelectProps","native","option","onSelectedOptions","newData","state","onDelete","contentText","List","ListItem","button","setIsOpenDialog","setSelectedItem","setSelectedIndex","item","findIndex","indexOf","updatedItem","index","copyArray","splice","DeleteConfirmDialog","actionText"],"mappings":"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","file":"static/js/24.d484a600.chunk.js","sourcesContent":["import { useForm } from \"react-hook-form\";\r\nimport { object, string, boolean, ref, mixed } from \"yup\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\n\r\nconst schema = (userForm = null) =>\r\n  object({\r\n    first_name: string().required(\"required\"),\r\n    last_name: string().required(\"required\"),\r\n    is_staff: boolean().required(\"required\"),\r\n    username: string().required(\"required\"),\r\n    phone_number: string().optional(),\r\n    email: string().required(\"required\"),\r\n    ...(!userForm && {\r\n      img: mixed().optional(),\r\n      // .test(\"fileFormat\", \"required\", (value) => {\r\n      //   return value;\r\n      // }),\r\n      password: string().required(\"required\"),\r\n      confirm_password: string()\r\n        .oneOf([ref(\"password\")], \"Passwords do not match\")\r\n        .required(\"required\"),\r\n    }),\r\n  });\r\n\r\nexport type UserFormValues = {\r\n  unique_id: string;\r\n  first_name: string;\r\n  last_name: string;\r\n  is_staff: boolean;\r\n  username: string;\r\n  phone_number: string;\r\n  email: string;\r\n  img?: any;\r\n  password: string;\r\n  confirm_password: string;\r\n};\r\n\r\nexport const defaultUserFormValues: UserFormValues = {\r\n  unique_id: \"\",\r\n  first_name: \"\",\r\n  last_name: \"\",\r\n  is_staff: false,\r\n  username: \"\",\r\n  phone_number: \"\",\r\n  email: \"\",\r\n  img: \"\",\r\n  password: \"\",\r\n  confirm_password: \"\",\r\n};\r\n\r\nexport default function useUserForm(userForm = null) {\r\n  const form = useForm<UserFormValues>({\r\n    resolver: yupResolver(schema(userForm)),\r\n    defaultValues: defaultUserFormValues,\r\n  });\r\n\r\n  const resetForm = () => form.reset(defaultUserFormValues);\r\n\r\n  return {\r\n    form,\r\n    resetForm,\r\n  };\r\n}\r\n","import { FC, useEffect, useRef } from \"react\";\r\nimport { Controller, SubmitHandler } from \"react-hook-form\";\r\nimport { LoadingButton } from \"@mui/lab\";\r\n\r\nimport {\r\n  Checkbox,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n  DialogTitle,\r\n  FormControlLabel,\r\n  FormGroup,\r\n  Stack,\r\n  TextField,\r\n} from \"@mui/material\";\r\n\r\nimport useUserForm from \"../../hooks/form/useUserForm\";\r\nimport useLoading from \"../../hooks/useLoading\";\r\nimport useToast from \"../../hooks/useToast\";\r\nimport { UserFormValues } from \"../../hooks/form/useUserForm\";\r\nimport { usersService } from \"../../api/usersService\";\r\nimport useAuth from \"../../hooks/useAuth\";\r\n\r\ninterface DialogUserFormProps {\r\n  open: boolean;\r\n  form: any;\r\n  onClose: () => void;\r\n  afterSubmit?: (data: any) => void;\r\n}\r\n\r\nconst DialogUserForm: FC<DialogUserFormProps> = ({\r\n  open = false,\r\n  onClose,\r\n  form = null,\r\n  afterSubmit,\r\n}) => {\r\n  const { user } = useAuth();\r\n  const {\r\n    form: { control, handleSubmit, setValue },\r\n    resetForm,\r\n  } = useUserForm(form);\r\n  const { startLoading, endLoading, isLoading } = useLoading();\r\n  const { showErrorToast, showSuccessToast } = useToast();\r\n\r\n  const onSubmit: SubmitHandler<UserFormValues> = async (data) => {\r\n    startLoading();\r\n    try {\r\n      let response = {};\r\n      if (form) {\r\n        delete data.password;\r\n        delete data.confirm_password;\r\n        // call api\r\n        response = await usersService.update(data.unique_id, data);\r\n        showSuccessToast(\"User successfully updated!\");\r\n      } else {\r\n        // callapi\r\n        response = await usersService.add(data);\r\n        showSuccessToast(\"User successfully registered!\");\r\n      }\r\n      afterSubmit && afterSubmit(response);\r\n    } catch (error) {\r\n      showErrorToast(error);\r\n    }\r\n    endLoading();\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (form) {\r\n      const {\r\n        first_name,\r\n        last_name,\r\n        is_staff,\r\n        username,\r\n        phone_number,\r\n        email,\r\n        unique_id,\r\n      } = form;\r\n\r\n      setValue(\"unique_id\", unique_id);\r\n      setValue(\"first_name\", first_name);\r\n      setValue(\"last_name\", last_name);\r\n      setValue(\"is_staff\", is_staff);\r\n      setValue(\"username\", username);\r\n      setValue(\"phone_number\", phone_number || \"\");\r\n      setValue(\"email\", email);\r\n    } else {\r\n      resetForm();\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [form]);\r\n\r\n  useEffect(() => {\r\n    if (!open) {\r\n      resetForm();\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [open]);\r\n\r\n  const title = form ? \"Update User\" : \"Add User\";\r\n  const fileRef = useRef(null);\r\n\r\n  return (\r\n    <Dialog fullWidth maxWidth=\"lg\" open={open}>\r\n      <DialogTitle>{title}</DialogTitle>\r\n      <DialogContent>\r\n        <Stack spacing={2} mt={2}>\r\n          <Stack direction={{ xs: \"column\", md: \"row\" }} spacing={2}>\r\n            <Controller\r\n              name=\"first_name\"\r\n              control={control}\r\n              render={({ field, fieldState: { error } }) => (\r\n                <TextField\r\n                  fullWidth\r\n                  label=\"*First name\"\r\n                  {...field}\r\n                  error={!!error}\r\n                  helperText={error?.message}\r\n                />\r\n              )}\r\n            />\r\n            <Controller\r\n              name=\"last_name\"\r\n              control={control}\r\n              render={({ field, fieldState: { error } }) => (\r\n                <TextField\r\n                  fullWidth\r\n                  label=\"*Last name\"\r\n                  {...field}\r\n                  error={!!error}\r\n                  helperText={error?.message}\r\n                />\r\n              )}\r\n            />\r\n          </Stack>\r\n\r\n          <Stack direction={{ xs: \"column\", md: \"row\" }} spacing={2}>\r\n            {form === null && (\r\n              <Controller\r\n                name=\"img\"\r\n                control={control}\r\n                render={({\r\n                  field: { value, onBlur, onChange },\r\n                  fieldState: { error },\r\n                }) => (\r\n                  <>\r\n                    <TextField\r\n                      fullWidth\r\n                      label=\"*Choose File\"\r\n                      onClick={() => fileRef.current.click()}\r\n                      value={value?.name || \"\"}\r\n                      contentEditable={false}\r\n                      onBlur={onBlur}\r\n                      error={!!error}\r\n                      helperText={error?.message}\r\n                    />\r\n                    <input\r\n                      ref={fileRef}\r\n                      hidden\r\n                      type=\"file\"\r\n                      onChange={({ target }) => {\r\n                        setValue(\"img\", target?.files[0] || \"\");\r\n                      }}\r\n                    />\r\n                  </>\r\n                  // <TextField\r\n                  //   fullWidth\r\n                  //   label=\"*File\"\r\n                  //   type=\"file\"\r\n                  //   value={value?.name || \"\"}\r\n                  //   contentEditable={false}\r\n                  //   onChange={({ target }) => {\r\n                  //     setValue(\"img\", target?.files[0] || \"\");\r\n                  //   }}\r\n                  //   error={!!error}\r\n                  //   helperText={error?.message}\r\n                  // />\r\n                )}\r\n              />\r\n            )}\r\n\r\n            <Controller\r\n              name=\"is_staff\"\r\n              control={control}\r\n              render={({\r\n                field: { value, onChange },\r\n                fieldState: { error },\r\n              }) => (\r\n                <FormGroup>\r\n                  <FormControlLabel\r\n                    control={\r\n                      <Checkbox\r\n                        defaultChecked={value}\r\n                        checked={value}\r\n                        value={value}\r\n                        onChange={({ target }) => onChange(target.checked)}\r\n                        sx={{ color: \"#e47b11\", marginLeft: \"-130px\" }}\r\n                      />\r\n                    }\r\n                    label=\"Is a Staff\"\r\n                    sx={{ marginLeft: \"120px\" }}\r\n                  />\r\n                </FormGroup>\r\n              )}\r\n            />\r\n          </Stack>\r\n\r\n          <Controller\r\n            name=\"username\"\r\n            control={control}\r\n            render={({ field, fieldState: { error } }) => (\r\n              <TextField\r\n                fullWidth\r\n                label=\"*Username\"\r\n                {...field}\r\n                disabled={!user.is_staff}\r\n                error={!!error}\r\n                helperText={error?.message}\r\n              />\r\n            )}\r\n          />\r\n\r\n          <Stack direction={{ xs: \"column\", md: \"row\" }} spacing={2}>\r\n            <Controller\r\n              name=\"phone_number\"\r\n              control={control}\r\n              render={({ field, fieldState: { error } }) => (\r\n                <TextField\r\n                  fullWidth\r\n                  label=\"Phone number\"\r\n                  {...field}\r\n                  error={!!error}\r\n                  helperText={error?.message}\r\n                />\r\n              )}\r\n            />\r\n            <Controller\r\n              name=\"email\"\r\n              control={control}\r\n              render={({ field, fieldState: { error } }) => (\r\n                <TextField\r\n                  fullWidth\r\n                  label=\"*Email address\"\r\n                  {...field}\r\n                  error={!!error}\r\n                  helperText={error?.message}\r\n                />\r\n              )}\r\n            />\r\n          </Stack>\r\n\r\n          {form === null && (\r\n            <Stack direction={{ xs: \"column\", md: \"row\" }} spacing={2}>\r\n              <Controller\r\n                name=\"password\"\r\n                control={control}\r\n                render={({ field, fieldState: { error } }) => (\r\n                  <TextField\r\n                    fullWidth\r\n                    label=\"*Password\"\r\n                    type=\"password\"\r\n                    {...field}\r\n                    error={!!error}\r\n                    helperText={error?.message}\r\n                  />\r\n                )}\r\n              />\r\n              <Controller\r\n                name=\"confirm_password\"\r\n                control={control}\r\n                rules={{\r\n                  required: {\r\n                    value: form === null,\r\n                    message: \"required\",\r\n                  },\r\n                }}\r\n                render={({ field, fieldState: { error } }) => (\r\n                  <TextField\r\n                    fullWidth\r\n                    label=\"*Confirm password\"\r\n                    type=\"password\"\r\n                    {...field}\r\n                    error={!!error}\r\n                    helperText={error?.message}\r\n                  />\r\n                )}\r\n              />\r\n            </Stack>\r\n          )}\r\n        </Stack>\r\n      </DialogContent>\r\n      <DialogActions>\r\n        <LoadingButton\r\n          loading={isLoading}\r\n          disabled={isLoading}\r\n          onClick={onClose}\r\n        >\r\n          cancel\r\n        </LoadingButton>\r\n        <LoadingButton\r\n          variant=\"contained\"\r\n          disabled={isLoading}\r\n          onClick={handleSubmit(onSubmit)}\r\n        >\r\n          save\r\n        </LoadingButton>\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nexport default DialogUserForm;\r\n","import { Fragment } from \"react\";\r\nimport { useEffect, useMemo, useState } from \"react\";\r\nimport {\r\n  Box,\r\n  Container,\r\n  Stack,\r\n  TextField,\r\n  Card,\r\n  Dialog,\r\n  DialogTitle,\r\n  List,\r\n  ListItem,\r\n  Tooltip,\r\n} from \"@mui/material\";\r\n\r\nimport { Typography, Button } from \"@mui/material\";\r\n\r\nimport { Icon } from \"@iconify/react\";\r\nimport eyeFill from \"@iconify/icons-eva/eye-fill\";\r\nimport editFill from \"@iconify/icons-eva/edit-2-fill\";\r\nimport trashFill from \"@iconify/icons-eva/trash-2-fill\";\r\nimport { styled } from \"@mui/material/styles\";\r\nimport DataTable from \"../components/DataTable/DataTable\";\r\nimport useDialog from \"../hooks/useDialog\";\r\nimport useToast from \"../hooks/useToast\";\r\nimport useLoading from \"../hooks/useLoading\";\r\nimport useSelectedItem from \"../hooks/form/useSelectedItem\";\r\nimport DialogUserForm from \"../components/user/DialogUserForm\";\r\nimport DeleteConfirmDialog from \"../components/shared/DeleteDialog\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { usersService } from \"../api/usersService\";\r\nimport AddIcon from \"@mui/icons-material/Add\";\r\nimport print from \"print-js\";\r\n\r\nlet TOTAL_ADMIN = 0;\r\nlet TOTAL_USERS = 0;\r\nconst statusSelect = [\r\n  {\r\n    value: \"all\",\r\n    label: \"All\",\r\n  },\r\n  {\r\n    value: true,\r\n    label: \"Admin\",\r\n  },\r\n  {\r\n    value: false,\r\n    label: \"Clients\",\r\n  },\r\n];\r\n\r\nconst TABLE_HEAD = [\r\n  {\r\n    id: \"first_name\",\r\n    label: \"Name\",\r\n    value: ({ first_name, last_name }) => <>{first_name + \" \" + last_name}</>,\r\n    alignRight: false,\r\n  },\r\n\r\n  {\r\n    id: \"options\",\r\n    label: \"Actions\",\r\n    align: \"center\",\r\n    options: [\r\n      {\r\n        icon: eyeFill,\r\n        text: \"View profile\",\r\n        onClick: (el, action) => ({\r\n          el,\r\n          action,\r\n        }),\r\n        color: \"green\",\r\n        action: \"view\",\r\n      },\r\n      {\r\n        icon: editFill,\r\n        text: \"Update Profile\",\r\n        onClick: (el, action) => ({\r\n          el,\r\n          action,\r\n        }),\r\n        color: \"green\",\r\n        action: \"update\",\r\n      },\r\n      {\r\n        icon: trashFill,\r\n        text: \"Delete register\",\r\n        onClick: (el, action) => ({\r\n          el,\r\n          action,\r\n        }),\r\n        color: \"green\",\r\n        action: \"delete\",\r\n      },\r\n    ],\r\n  },\r\n];\r\n\r\nconst Users = () => {\r\n  const navigate = useNavigate();\r\n\r\n  const {\r\n    data,\r\n    selectedItem,\r\n    setData,\r\n    selectedIndex,\r\n    handleCloseSelectedItem,\r\n    handleSelectedItem,\r\n    handleUpdateItem,\r\n    handleRemoveItem,\r\n  } = useSelectedItem();\r\n\r\n  const { showErrorToast, showSuccessToast, isLoading } = useToast();\r\n  const { startLoading, endLoading } = useLoading();\r\n\r\n  const {\r\n    isOpenDialog: isOpenFormDialog,\r\n    openDialog: openFormDialog,\r\n    closeDialog: closeFormDialog,\r\n  } = useDialog();\r\n\r\n  const {\r\n    isOpenDialog: isOpenDeleteDialog,\r\n    openDialog: openDeleteDialog,\r\n    closeDialog: closeDeleteDialog,\r\n  } = useDialog();\r\n\r\n  const [search, setSeach] = useState(\"\");\r\n  const [statusFilter, setStatusFilter] = useState(\"all\");\r\n  const [selected, setSelected] = useState({});\r\n  const [dropdownExport, setDropDownExport] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const getUsers = async () => {\r\n      startLoading();\r\n      try {\r\n        const data = await usersService.list();\r\n\r\n        if (data.length > 0) {\r\n          setData(data);\r\n\r\n          TOTAL_ADMIN = data.filter((i) => i.is_staff === true).length;\r\n          TOTAL_USERS = data.length - TOTAL_ADMIN;\r\n        }\r\n      } catch (error) {\r\n        showErrorToast(error);\r\n      }\r\n      endLoading();\r\n    };\r\n    getUsers();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  const deleteItem = async () => {\r\n    if (selectedItem) {\r\n      startLoading();\r\n      try {\r\n        await usersService.delete(selectedItem?.unique_id);\r\n        showSuccessToast(\"User successfully deleted!\");\r\n        handleRemoveItem();\r\n        handleClose();\r\n      } catch (error) {\r\n        showErrorToast(error);\r\n      }\r\n      endLoading();\r\n    }\r\n  };\r\n\r\n  const handleAfterSubmit = (newData) => {\r\n    if (selectedIndex > -1) {\r\n      handleUpdateItem(newData);\r\n    } else {\r\n      setData((state) => [...state, newData]);\r\n    }\r\n    handleClose();\r\n  };\r\n\r\n  const exportToExcel = async () => {\r\n    try {\r\n      if (selected.length > 0) {\r\n        const sendData = {\r\n          id_users: selected.map((el) => el.unique_id),\r\n        };\r\n\r\n        const data = await usersService.exportUsers(sendData);\r\n\r\n        const url = window.URL.createObjectURL(new Blob([data]));\r\n        const link = document.createElement(\"a\");\r\n        link.href = url;\r\n        link.setAttribute(\"download\", \"Users.xlsx\");\r\n        document.body.appendChild(link);\r\n        link.click();\r\n      }\r\n    } catch (error) {\r\n      showErrorToast(error);\r\n    }\r\n    setDropDownExport(false);\r\n  };\r\n\r\n  const exportToPdf = async () => {\r\n    const dataToPrint = selected.map((el) => ({\r\n      ID: el?.unique_id,\r\n      Name: el?.first_name + \" \" + el?.last_name,\r\n    }));\r\n\r\n    print({\r\n      printable: dataToPrint,\r\n      properties: [\"ID\", \"Name\"],\r\n      type: \"json\",\r\n      header: '<h3 class=\"custom-h3\">User list</h3>',\r\n      style: \".custom-h3 { text-align: center }\",\r\n      showModal: true,\r\n    });\r\n\r\n    setDropDownExport(false);\r\n  };\r\n\r\n  const handleMoreAction = (action = \"\", el) => {\r\n    switch (action) {\r\n      case \"update\":\r\n        handleSelectedItem(el);\r\n        openFormDialog();\r\n        break;\r\n      case \"delete\":\r\n        handleSelectedItem(el);\r\n        openDeleteDialog();\r\n        break;\r\n      case \"view\":\r\n        navigate(\r\n          `/dashboard/user?id=${el?.unique_id}&username=${el?.username}`\r\n        );\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n  const handleSelectedAction = (action = \"\", selected) => {\r\n    setSelected(selected);\r\n    switch (action) {\r\n      case \"export\":\r\n        setDropDownExport(true);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  const handleClose = () => {\r\n    closeFormDialog();\r\n    closeDeleteDialog();\r\n    setSelected([]);\r\n    handleCloseSelectedItem();\r\n  };\r\n  const filteredData = useMemo(() => {\r\n    let filterData = data;\r\n\r\n    if (search) {\r\n      filterData = filterData.filter((el) =>\r\n        JSON.stringify(el).toLowerCase().includes(search.trim().toLowerCase())\r\n      );\r\n    }\r\n\r\n    if (statusFilter && statusFilter !== \"all\") {\r\n      const isTrue = statusFilter === \"true\";\r\n      filterData = filterData.filter((el) => el.is_staff === isTrue);\r\n    }\r\n\r\n    return filterData;\r\n  }, [search, statusFilter, data]);\r\n\r\n  return (\r\n    <Container>\r\n      <Stack\r\n        direction={{\r\n          xs: \"column\",\r\n          sm: \"row\",\r\n        }}\r\n        flexWrap=\"nowrap\"\r\n        justifyContent=\"space-between\"\r\n      >\r\n        <Typography variant=\"h2\" mb={2}>\r\n          Users\r\n        </Typography>\r\n        <Box direction=\"row\" alignItems=\"center\">\r\n          <Tooltip title=\"Add New User\">\r\n            <Button\r\n              variant=\"contained\"\r\n              onClick={openFormDialog}\r\n              sx={{\r\n                mr: {\r\n                  xs: 0,\r\n                  sm: 2,\r\n                },\r\n                mb: {\r\n                  xs: 1,\r\n                  sm: 0,\r\n                },\r\n                borderRadius: 10,\r\n                minWidth: 40,\r\n                py: 1,\r\n                height: \"fit-content\",\r\n                bgcolor: \"#E47911\",\r\n              }}\r\n            >\r\n              <AddIcon />\r\n            </Button>\r\n          </Tooltip>\r\n        </Box>\r\n      </Stack>\r\n      {/* <Box\r\n        sx={{\r\n          display: \"grid\",\r\n          gap: 1,\r\n          gridTemplateColumns: {\r\n            xs: \"none\",\r\n            md: \"repeat(2, 1fr)\",\r\n          },\r\n        }}\r\n      >\r\n        <RootStyle sx={{ width: \"100%\", marginBottom: 5 }}>\r\n          <div>\r\n            <Typography variant=\"h3\">{fNumber(TOTAL_ADMIN)}</Typography>\r\n            <Typography variant=\"subtitle2\" sx={{ color: \"text.secondary\" }}>\r\n              Total Admins\r\n            </Typography>\r\n          </div>\r\n\r\n          <AdminPanelSettingsIcon sx={{ fontSize: 100 }} />\r\n        </RootStyle>\r\n        <RootStyle sx={{ width: \"100%\", marginBottom: 5 }}>\r\n          <div>\r\n            <Typography variant=\"h3\">{fNumber(TOTAL_USERS)}</Typography>\r\n            <Typography variant=\"subtitle2\" sx={{ color: \"text.secondary\" }}>\r\n              Total Users\r\n            </Typography>\r\n          </div>\r\n          <GroupAddIcon sx={{ fontSize: 100 }} />\r\n        </RootStyle>\r\n      </Box> */}\r\n\r\n      <DataTable\r\n        defaultSort=\"first_name\"\r\n        header={TABLE_HEAD}\r\n        data={filteredData}\r\n        handleMoreAction={handleMoreAction}\r\n        isSelectable\r\n        isLoading={isLoading}\r\n        toolBarSection={\r\n          <Stack p={2} spacing={2} direction={{ sm: \"column\", md: \"row\" }}>\r\n            <TextField\r\n              fullWidth\r\n              label=\"search\"\r\n              value={search}\r\n              onChange={({ target: { value } }) => setSeach(value)}\r\n            />\r\n            <TextField\r\n              fullWidth\r\n              label=\"Type\"\r\n              onChange={({ target: { value } }) => setStatusFilter(value)}\r\n              select\r\n              SelectProps={{\r\n                native: true,\r\n              }}\r\n            >\r\n              {statusSelect.map((option) => (\r\n                <option key={option.value} value={option.value}>\r\n                  {option.label}\r\n                </option>\r\n              ))}\r\n            </TextField>\r\n          </Stack>\r\n        }\r\n        onSelectedOptions={[\r\n          {\r\n            icon: <Icon icon=\"mdi:file-export\" />,\r\n            title: \"export\",\r\n            action: handleSelectedAction,\r\n          },\r\n        ]}\r\n      />\r\n\r\n      <DialogUserForm\r\n        open={isOpenFormDialog}\r\n        onClose={closeFormDialog}\r\n        form={selectedItem}\r\n        afterSubmit={handleAfterSubmit}\r\n      />\r\n\r\n      <DeleteConfirmDialog\r\n        open={isOpenDeleteDialog}\r\n        onClose={closeDeleteDialog}\r\n        onDelete={deleteItem}\r\n        loading={isLoading}\r\n        contentText=\"Are you sure about delete this user?\"\r\n      />\r\n\r\n      <Dialog open={dropdownExport} onClose={() => setDropDownExport(false)}>\r\n        <DialogTitle>Set export format</DialogTitle>\r\n        <List>\r\n          <ListItem button onClick={exportToPdf}>\r\n            PDF\r\n          </ListItem>\r\n          <ListItem button onClick={exportToExcel}>\r\n            Excel\r\n          </ListItem>\r\n        </List>\r\n      </Dialog>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Users;\r\n","import { useState } from \"react\";\r\n\r\nexport default function useDialog() {\r\n  const [isOpenDialog, setIsOpenDialog] = useState(false);\r\n\r\n  const openDialog = () => setIsOpenDialog(true);\r\n\r\n  const closeDialog = () => setIsOpenDialog(false);\r\n\r\n  return {\r\n    isOpenDialog,\r\n    openDialog,\r\n    closeDialog,\r\n  };\r\n}\r\n","import { useState } from \"react\";\r\n\r\nexport default function useSelectedItem() {\r\n  const [data, setData] = useState<any[]>([]);\r\n  const [selectedItem, setSelectedItem] = useState(null);\r\n  const [selectedIndex, setSelectedIndex] = useState(-1);\r\n\r\n  const handleSelectedItem = (item: any) => {\r\n    const findIndex = data.indexOf(item);\r\n\r\n    if (findIndex > -1) {\r\n      setSelectedIndex(findIndex);\r\n      setSelectedItem(item);\r\n    }\r\n  };\r\n\r\n  const handleCloseSelectedItem = () => {\r\n    setSelectedItem(null);\r\n    setSelectedIndex(-1);\r\n  };\r\n\r\n  const handleUpdateItem = (updatedItem: any) => {\r\n    const index = selectedIndex;\r\n    const copyArray = [...data];\r\n    copyArray.splice(index, 1, updatedItem);\r\n    setData(copyArray);\r\n    handleCloseSelectedItem();\r\n  };\r\n\r\n  const handleRemoveItem = () => {\r\n    const index = selectedIndex;\r\n    const copyArray = [...data];\r\n    copyArray.splice(index, 1);\r\n    setData(copyArray);\r\n    handleCloseSelectedItem();\r\n  };\r\n\r\n  return {\r\n    data,\r\n    setData,\r\n    selectedItem,\r\n    selectedIndex,\r\n    handleSelectedItem,\r\n    handleCloseSelectedItem,\r\n    handleUpdateItem,\r\n    handleRemoveItem,\r\n  };\r\n}\r\n","import { LoadingButton } from \"@mui/lab\";\r\nimport {\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n  DialogContentText,\r\n  DialogTitle,\r\n} from \"@mui/material\";\r\nimport { FC } from \"react\";\r\n\r\ninterface Props {\r\n  open: boolean;\r\n  onClose: () => void;\r\n  onDelete: () => void;\r\n  loading: boolean;\r\n  contentText?: string;\r\n  actionText?: string;\r\n  title?: string;\r\n}\r\n\r\nconst DeleteConfirmDialog: FC<Props> = ({\r\n  open,\r\n  onClose,\r\n  onDelete,\r\n  title = \"\",\r\n  contentText = \"\",\r\n  actionText = \"\",\r\n  loading,\r\n}) => {\r\n  return (\r\n    <Dialog open={open}>\r\n      <DialogTitle>{title || \"Confirm Delete\"}</DialogTitle>\r\n      <DialogContent>\r\n        <DialogContentText>\r\n          {contentText || \"Are you sure you want to delete?\"}\r\n        </DialogContentText>\r\n      </DialogContent>\r\n      <DialogActions>\r\n        <LoadingButton loading={loading} onClick={onClose}>\r\n          Cancel\r\n        </LoadingButton>\r\n        <LoadingButton loading={loading} onClick={onDelete}>\r\n          {actionText || \"Delete\" }\r\n        </LoadingButton>\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n};\r\nexport default DeleteConfirmDialog;\r\n"],"sourceRoot":""}