{"version":3,"sources":["components/tickets/DialogTicketForm.tsx","views/Tickets.tsx","hooks/useDialog.js","hooks/form/useSelectedItem.ts","api/ticketService.ts","hooks/form/useTicketForm.tsx"],"names":["DialogTicketForm","open","onClose","form","afterSubmit","user","useAuth","useTicketForm","control","handleSubmit","setValue","resetForm","useLoading","startLoading","endLoading","isLoading","useToast","showErrorToast","showSuccessToast","useState","conversation","setConversation","useEffect","findTicketInfo","a","Promise","all","ticketService","getTicketInfo","id","getTicketConversation","data","conv","description_text","subject","onSubmit","values","createTicket","email","freshdesk_email","type","custom_fields","cf_client_name","first_name","last_name","cf_store_name","store_default","name","Dialog","fullWidth","maxWidth","DialogTitle","DialogContent","Stack","spacing","mt","render","field","error","fieldState","TextField","label","helperText","message","disabled","Boolean","multiline","rows","length","Timeline","position","map","item","index","TimelineItem","sx","content","TimelineSeparator","TimelineDot","color","TimelineConnector","TimelineContent","Typography","variant","component","support_email","created_at","split","body_text","DialogActions","LoadingButton","loading","onClick","statusName","getStatusColor","status","TABLE_HEAD","value","alignRight","Chip","align","options","icon","eyeFill","text","el","action","Tickets","useSelectedItem","selectedItem","setData","selectedIndex","handleCloseSelectedItem","handleSelectedItem","handleUpdateItem","useDialog","isOpenDialog","openDialog","closeDialog","isValidEmail","setIsValidEmail","getTickets","getTicketByEmail","response","errors","handleClose","Container","direction","xs","sm","flexWrap","justifyContent","mb","Tooltip","title","Button","mr","md","borderRadius","minWidth","py","height","bgcolor","DataTable","header","handleMoreAction","newData","state","textAlign","setIsOpenDialog","setSelectedItem","setSelectedIndex","findIndex","indexOf","updatedItem","copyArray","splice","handleRemoveItem","fresdeskhttp","axios","create","baseURL","headers","Authorization","btoa","post","getAllTickets","get","ticketId","sendReply","reply","body","replyBody","schema","object","string","required","description","number","priority","defaultTicketFormValues","useForm","resolver","yupResolver","defaultValues","reset"],"mappings":"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","file":"static/js/22.7bc2417a.chunk.js","sourcesContent":["import { FC, useEffect, useState } from \"react\";\r\nimport {\r\n  LoadingButton,\r\n  Timeline,\r\n  TimelineItem,\r\n  TimelineSeparator,\r\n  TimelineDot,\r\n  TimelineConnector,\r\n  TimelineContent,\r\n} from \"@mui/lab\";\r\nimport {\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n  DialogTitle,\r\n  Stack,\r\n  TextField,\r\n  Typography,\r\n} from \"@mui/material\";\r\nimport { Controller, SubmitHandler } from \"react-hook-form\";\r\nimport useTicketForm from \"../../hooks/form/useTicketForm\";\r\nimport { TicketFormValues } from \"../../hooks/form/useTicketForm\";\r\nimport useLoading from \"../../hooks/useLoading\";\r\nimport useToast from \"../../hooks/useToast\";\r\nimport { ticketService } from \"../../api/ticketService\";\r\nimport useAuth from \"../../hooks/useAuth\";\r\n\r\ninterface DialogTicketFormProps {\r\n  open: boolean;\r\n  onClose: () => void;\r\n  form: null;\r\n  afterSubmit?: (data: any) => void;\r\n}\r\n\r\nexport const DialogTicketForm: FC<DialogTicketFormProps> = ({\r\n  open = false,\r\n  onClose,\r\n  form,\r\n  afterSubmit,\r\n}) => {\r\n  const { user } = useAuth();\r\n  const {\r\n    form: { control, handleSubmit, setValue },\r\n    resetForm,\r\n  } = useTicketForm();\r\n\r\n  const { startLoading, endLoading, isLoading } = useLoading();\r\n  const { showErrorToast, showSuccessToast } = useToast();\r\n  const [conversation, setConversation] = useState([]);\r\n\r\n  useEffect(() => {\r\n    if (!open) {\r\n      resetForm();\r\n      setConversation([]);\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [open]);\r\n\r\n  useEffect(() => {\r\n    if (form) {\r\n      const findTicketInfo = async () => {\r\n        startLoading();\r\n        try {\r\n          const [data, conv] = await Promise.all([\r\n            ticketService.getTicketInfo(form.id),\r\n            ticketService.getTicketConversation(form.id),\r\n          ]);\r\n\r\n          setConversation(conv);\r\n\r\n          const { description_text, subject } = data;\r\n\r\n          setValue(\"description\", description_text);\r\n          setValue(\"subject\", subject);\r\n        } catch (error) {\r\n          showErrorToast(error);\r\n        }\r\n\r\n        endLoading();\r\n      };\r\n      findTicketInfo();\r\n    } else {\r\n      resetForm();\r\n      setConversation([]);\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [form]);\r\n\r\n  const onSubmit: SubmitHandler<TicketFormValues> = async (values) => {\r\n    startLoading();\r\n    try {\r\n      const data = await ticketService.createTicket({\r\n        ...values,\r\n        email: user.freshdesk_email,\r\n        type: \"Question\",\r\n        custom_fields: {\r\n          cf_client_name: `${user.first_name} ${user.last_name}`,\r\n          cf_store_name: user?.store_default?.name,\r\n        },\r\n      });\r\n      showSuccessToast(\"Ticket sended!\");\r\n\r\n      afterSubmit?.(data);\r\n    } catch (error) {\r\n      showErrorToast(error);\r\n    }\r\n    endLoading();\r\n  };\r\n\r\n  return (\r\n    <Dialog fullWidth maxWidth=\"lg\" open={open}>\r\n      <DialogTitle>Ticket</DialogTitle>\r\n      <DialogContent>\r\n        <Stack spacing={2} mt={2}>\r\n          {!form && (\r\n            <Controller\r\n              name=\"name\"\r\n              control={control}\r\n              render={({ field, fieldState: { error } }) => (\r\n                <TextField\r\n                  fullWidth\r\n                  label=\"*Name\"\r\n                  error={!!error}\r\n                  helperText={error?.message}\r\n                  {...field}\r\n                />\r\n              )}\r\n            />\r\n          )}\r\n          <Controller\r\n            name=\"subject\"\r\n            control={control}\r\n            render={({ field, fieldState: { error } }) => (\r\n              <TextField\r\n                fullWidth\r\n                disabled={Boolean(form)}\r\n                label=\"*Subject\"\r\n                error={!!error}\r\n                helperText={error?.message}\r\n                {...field}\r\n              />\r\n            )}\r\n          />\r\n          <Controller\r\n            name=\"description\"\r\n            control={control}\r\n            render={({ field, fieldState: { error } }) => (\r\n              <TextField\r\n                fullWidth\r\n                label=\"*Description\"\r\n                disabled={Boolean(form)}\r\n                multiline\r\n                rows={6}\r\n                error={!!error}\r\n                helperText={error?.message}\r\n                {...field}\r\n              />\r\n            )}\r\n          />\r\n        </Stack>\r\n\r\n        {conversation.length > 0 && (\r\n          <Timeline position=\"right\">\r\n            {conversation.map((item, index) => (\r\n              <TimelineItem\r\n                position=\"right\"\r\n                sx={{\r\n                  \"&:before\": {\r\n                    content: \"none\",\r\n                  },\r\n                }}\r\n              >\r\n                <TimelineSeparator>\r\n                  <TimelineDot color=\"primary\" />\r\n                  <TimelineConnector />\r\n                </TimelineSeparator>\r\n                <TimelineContent>\r\n                  <Typography variant=\"subtitle2\" component=\"span\">\r\n                    {item?.support_email || \"\"} (\r\n                    {` ${item?.created_at?.split(\"T\")?.[0]} `})\r\n                  </Typography>\r\n                  <Typography>{item?.body_text || \"\"}</Typography>\r\n                </TimelineContent>\r\n              </TimelineItem>\r\n            ))}\r\n          </Timeline>\r\n        )}\r\n      </DialogContent>\r\n      <DialogActions>\r\n        <LoadingButton loading={isLoading} onClick={onClose}>\r\n          cancel\r\n        </LoadingButton>\r\n        {!form && (\r\n          <LoadingButton\r\n            loading={isLoading}\r\n            variant=\"contained\"\r\n            onClick={handleSubmit(onSubmit)}\r\n          >\r\n            send\r\n          </LoadingButton>\r\n        )}\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n};\r\n","import {\r\n  Container,\r\n  Stack,\r\n  Tooltip,\r\n  Button,\r\n  Typography,\r\n  Chip,\r\n} from \"@mui/material\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { ticketService } from \"../api/ticketService\";\r\nimport DataTable from \"../components/DataTable/DataTable\";\r\nimport { DialogTicketForm } from \"../components/tickets/DialogTicketForm\";\r\nimport useSelectedItem from \"../hooks/form/useSelectedItem\";\r\nimport useDialog from \"../hooks/useDialog\";\r\nimport useLoading from \"../hooks/useLoading\";\r\nimport useToast from \"../hooks/useToast\";\r\nimport eyeFill from \"@iconify/icons-eva/eye-fill\";\r\nimport ArticleIcon from \"@mui/icons-material/Article\";\r\nimport useAuth from \"../hooks/useAuth\";\r\n\r\nexport const statusName = {\r\n  2: \"Open\",\r\n  3: \"Pending\",\r\n  4: \"Resolved\",\r\n  5: \"Closed\",\r\n  6: \"Waiting on Customer\",\r\n  7: \"Waiting on Third Party\",\r\n};\r\n\r\nconst getStatusColor = (status) => {\r\n  switch (status) {\r\n    case 4:\r\n    case 5:\r\n      return \"success\";\r\n    default:\r\n      return \"warning\";\r\n  }\r\n};\r\n\r\nconst TABLE_HEAD = [\r\n  {\r\n    id: \"subject\",\r\n    label: \"Subject\",\r\n    value: \"subject\",\r\n    alignRight: false,\r\n  },\r\n  {\r\n    id: \"status\",\r\n    label: \"Status\",\r\n    value: ({ status }) => (\r\n      <Chip\r\n        sx={{\r\n          color: \"#fff\",\r\n        }}\r\n        label={statusName[status]}\r\n        color={getStatusColor(status)}\r\n      />\r\n    ),\r\n    alignRight: false,\r\n  },\r\n  {\r\n    id: \"created_at\",\r\n    label: \"Send Date\",\r\n    value: ({ created_at }: any) => created_at?.split(\"T\")?.[0],\r\n    alignRight: false,\r\n  },\r\n  {\r\n    id: \"options\",\r\n    label: \"Actions\",\r\n    align: \"center\",\r\n    options: [\r\n      {\r\n        icon: eyeFill,\r\n        text: \"View details\",\r\n        onClick: (el, action) => ({\r\n          el,\r\n          action,\r\n        }),\r\n        color: \"green\",\r\n        action: \"view\",\r\n      },\r\n    ],\r\n  },\r\n];\r\n\r\nconst Tickets = () => {\r\n  const { user } = useAuth();\r\n\r\n  const {\r\n    data,\r\n    selectedItem,\r\n    setData,\r\n    selectedIndex,\r\n    handleCloseSelectedItem,\r\n    handleSelectedItem,\r\n    handleUpdateItem,\r\n  } = useSelectedItem();\r\n\r\n  const { isOpenDialog, openDialog, closeDialog } = useDialog();\r\n  const { startLoading, endLoading, isLoading } = useLoading();\r\n  const { showErrorToast } = useToast();\r\n  const [isValidEmail, setIsValidEmail] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (user?.freshdesk_email) {\r\n      const getTickets = async () => {\r\n        startLoading();\r\n        try {\r\n          const data = await ticketService.getTicketByEmail(\r\n            user?.freshdesk_email\r\n          );\r\n          setData(data);\r\n          setIsValidEmail(true);\r\n        } catch (error) {\r\n          if (error?.response?.data?.errors?.[0]?.field === \"email\") {\r\n            showErrorToast(\"Email is not registered in Freshdesk\");\r\n          } else {\r\n            showErrorToast(error);\r\n          }\r\n        }\r\n        endLoading();\r\n      };\r\n      getTickets();\r\n    }\r\n  }, [user]);\r\n\r\n  const handleClose = () => {\r\n    closeDialog();\r\n    handleCloseSelectedItem();\r\n  };\r\n\r\n  const handleMoreAction = (action = \"\", el) => {\r\n    switch (action) {\r\n      case \"view\":\r\n        handleSelectedItem(el);\r\n        openDialog();\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  const handleAfterSubmit = (newData) => {\r\n    if (selectedIndex > -1) {\r\n      handleUpdateItem(newData);\r\n    } else {\r\n      setData((state) => [...state, newData]);\r\n    }\r\n    handleClose();\r\n  };\r\n\r\n  if (!user?.freshdesk_email) {\r\n    return (\r\n      <Container maxWidth=\"lg\">\r\n        <Typography variant=\"h5\" mb={2} textAlign=\"center\">\r\n          You need to update your profile, update \"Freshdesk email\" field to\r\n          send tickets\r\n        </Typography>\r\n      </Container>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Container maxWidth=\"lg\">\r\n      <Stack\r\n        direction={{\r\n          xs: \"column\",\r\n          sm: \"row\",\r\n        }}\r\n        flexWrap=\"nowrap\"\r\n        justifyContent=\"space-between\"\r\n      >\r\n        <Typography variant=\"h2\" mb={2}>\r\n          Tickets\r\n        </Typography>\r\n        {isValidEmail && (\r\n          <Tooltip title=\"Create ticket\">\r\n            <Button\r\n              variant=\"contained\"\r\n              onClick={openDialog}\r\n              sx={{\r\n                mr: {\r\n                  xs: 0,\r\n                  sm: 3,\r\n                },\r\n                mb: {\r\n                  xs: 2,\r\n                  sm: 2,\r\n                  md: 0,\r\n                },\r\n                borderRadius: 10,\r\n                minWidth: 40,\r\n                py: 1,\r\n                height: \"fit-content\",\r\n                bgcolor: \"#E47911\",\r\n              }}\r\n            >\r\n              <ArticleIcon />\r\n            </Button>\r\n          </Tooltip>\r\n        )}\r\n      </Stack>\r\n\r\n      <DataTable\r\n        header={TABLE_HEAD}\r\n        data={data}\r\n        isLoading={isLoading}\r\n        handleMoreAction={handleMoreAction}\r\n      />\r\n\r\n      <DialogTicketForm\r\n        open={isOpenDialog}\r\n        onClose={handleClose}\r\n        form={selectedItem}\r\n        afterSubmit={handleAfterSubmit}\r\n      />\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Tickets;\r\n","import { useState } from \"react\";\r\n\r\nexport default function useDialog() {\r\n  const [isOpenDialog, setIsOpenDialog] = useState(false);\r\n\r\n  const openDialog = () => setIsOpenDialog(true);\r\n\r\n  const closeDialog = () => setIsOpenDialog(false);\r\n\r\n  return {\r\n    isOpenDialog,\r\n    openDialog,\r\n    closeDialog,\r\n  };\r\n}\r\n","import { useState } from \"react\";\r\n\r\nexport default function useSelectedItem() {\r\n  const [data, setData] = useState<any[]>([]);\r\n  const [selectedItem, setSelectedItem] = useState(null);\r\n  const [selectedIndex, setSelectedIndex] = useState(-1);\r\n\r\n  const handleSelectedItem = (item: any) => {\r\n    const findIndex = data.indexOf(item);\r\n\r\n    if (findIndex > -1) {\r\n      setSelectedIndex(findIndex);\r\n      setSelectedItem(item);\r\n    }\r\n  };\r\n\r\n  const handleCloseSelectedItem = () => {\r\n    setSelectedItem(null);\r\n    setSelectedIndex(-1);\r\n  };\r\n\r\n  const handleUpdateItem = (updatedItem: any) => {\r\n    const index = selectedIndex;\r\n    const copyArray = [...data];\r\n    copyArray.splice(index, 1, updatedItem);\r\n    setData(copyArray);\r\n    handleCloseSelectedItem();\r\n  };\r\n\r\n  const handleRemoveItem = () => {\r\n    const index = selectedIndex;\r\n    const copyArray = [...data];\r\n    copyArray.splice(index, 1);\r\n    setData(copyArray);\r\n    handleCloseSelectedItem();\r\n  };\r\n\r\n  return {\r\n    data,\r\n    setData,\r\n    selectedItem,\r\n    selectedIndex,\r\n    handleSelectedItem,\r\n    handleCloseSelectedItem,\r\n    handleUpdateItem,\r\n    handleRemoveItem,\r\n  };\r\n}\r\n","import axios from \"axios\";\r\n\r\nconst BASE_URL = \"https://automationempire.freshdesk.com/api/v2/tickets/\";\r\n\r\nconst fresdeskhttp = axios.create({\r\n  baseURL: BASE_URL,\r\n  headers: {\r\n    \"Content-Type\": \"application/json\",\r\n    Authorization: `Basic ` + btoa(`iaeop6p6moF6vCcZ3v:X`),\r\n  },\r\n});\r\n\r\nexport const ticketService = {\r\n  createTicket: async (form: any) => {\r\n    const { data } = await fresdeskhttp.post(\"\", form);\r\n    return data;\r\n  },\r\n  getAllTickets: async () => {\r\n    const { data } = await fresdeskhttp.get(\"?include=requester\");\r\n    return data;\r\n  },\r\n  getTicketByEmail: async (email: string) => {\r\n    const { data } = await fresdeskhttp.get(`?email=${email}`);\r\n    return data;\r\n  },\r\n  getTicketInfo: async (ticketId: number) => {\r\n    const { data } = await fresdeskhttp.get(`/${ticketId}`);\r\n    return data;\r\n  },\r\n  getTicketConversation: async (ticketId: number) => {\r\n    const { data } = await fresdeskhttp.get(`/${ticketId}/conversations`);\r\n    return data;\r\n  },\r\n  sendReply: async (ticketId: number, reply: string) => {\r\n    const { data } = await fresdeskhttp.post(`/${ticketId}/reply`, {\r\n      body: replyBody(reply),\r\n    });\r\n    return data;\r\n  },\r\n};\r\n\r\nconst replyBody = (content: string) =>\r\n  `<div style=\\\"font-family:-apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Helvetica Neue, Arial, sans-serif; font-size:14px\\\">\\n<div dir=\\\"ltr\\\">${content}\\n</div>\\n<div dir=\\\"ltr\\\"><div><br></div></div>\\n</div>`;\r\n","import { useForm } from \"react-hook-form\";\r\nimport { object, string, number } from \"yup\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\n\r\nconst schema = object({\r\n  name: string().required(\"required\"),\r\n  // email: string().email().required(\"required\"),\r\n  subject: string().required(\"required\"),\r\n  description: string().required(\"required\"),\r\n  status: number().required(\"required\"),\r\n  priority: number().required(\"required\"),\r\n});\r\n\r\nexport type TicketFormValues = {\r\n  name: string;\r\n  // email: string;\r\n  subject: string;\r\n  description: string;\r\n  status: number;\r\n  priority: number;\r\n};\r\n\r\nexport const defaultTicketFormValues: TicketFormValues = {\r\n  name: \"\",\r\n  // email: \"\",\r\n  subject: \"\",\r\n  description: \"\",\r\n  status: 2,\r\n  priority: 1,\r\n};\r\n\r\nexport default function useTicketForm() {\r\n  const form = useForm<TicketFormValues>({\r\n    resolver: yupResolver(schema),\r\n    defaultValues: defaultTicketFormValues,\r\n  });\r\n\r\n  const resetForm = () => form.reset(defaultTicketFormValues);\r\n\r\n  return {\r\n    form,\r\n    resetForm,\r\n  };\r\n}\r\n"],"sourceRoot":""}