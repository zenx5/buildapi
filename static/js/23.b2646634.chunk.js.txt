{"version":3,"sources":["components/tickets/DialogTicketAdminForm.tsx","views/TicketsAdmin.tsx","hooks/useDialog.js","hooks/form/useSelectedItem.ts","api/ticketService.ts","hooks/form/useTicketForm.tsx"],"names":["DialogTicketAdminForm","open","onClose","form","afterSubmit","useTicketForm","control","setValue","handleSubmit","resetForm","useLoading","startLoading","endLoading","isLoading","useToast","showErrorToast","showSuccessToast","useState","conversation","setConversation","reply","setReply","useEffect","findTicketInfo","a","Promise","all","ticketService","getTicketInfo","id","getTicketConversation","data","conv","description_text","subject","onSubmit","sendReply","Dialog","fullWidth","maxWidth","DialogTitle","DialogContent","Stack","spacing","mt","requester","name","render","field","fieldState","error","TextField","label","value","disabled","Boolean","helperText","message","multiline","rows","length","Timeline","position","map","item","index","TimelineItem","sx","content","TimelineSeparator","TimelineDot","color","TimelineConnector","TimelineContent","Typography","variant","component","support_email","created_at","split","body_text","toString","DialogActions","width","px","includes","status","onChange","e","target","mb","direction","justifyContent","LoadingButton","loading","onClick","statusName","getStatusColor","TABLE_HEAD","alignRight","Chip","align","options","icon","eyeFill","text","el","action","TicketsAdmin","useSelectedItem","selectedItem","setData","handleCloseSelectedItem","selectedIndex","handleSelectedItem","handleUpdateItem","useDialog","isOpenDialog","openDialog","closeDialog","getTickets","getAllTickets","handleClose","Container","xs","sm","flexWrap","DataTable","header","handleMoreAction","newData","setIsOpenDialog","setSelectedItem","setSelectedIndex","findIndex","indexOf","updatedItem","copyArray","splice","handleRemoveItem","fresdeskhttp","axios","create","baseURL","headers","Authorization","btoa","createTicket","post","get","getTicketByEmail","email","ticketId","body","replyBody","schema","object","string","required","description","number","priority","defaultTicketFormValues","useForm","resolver","yupResolver","defaultValues","reset"],"mappings":"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","file":"static/js/23.b2646634.chunk.js","sourcesContent":["import { FC, useEffect, useState } from \"react\";\r\nimport {\r\n  LoadingButton,\r\n  Timeline,\r\n  TimelineItem,\r\n  TimelineSeparator,\r\n  TimelineDot,\r\n  TimelineConnector,\r\n  TimelineContent,\r\n} from \"@mui/lab\";\r\nimport {\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n  DialogTitle,\r\n  Stack,\r\n  TextField,\r\n  Typography,\r\n} from \"@mui/material\";\r\nimport { Controller, SubmitHandler } from \"react-hook-form\";\r\nimport useTicketForm from \"../../hooks/form/useTicketForm\";\r\nimport { TicketFormValues } from \"../../hooks/form/useTicketForm\";\r\nimport useLoading from \"../../hooks/useLoading\";\r\nimport useToast from \"../../hooks/useToast\";\r\nimport { ticketService } from \"../../api/ticketService\";\r\n\r\ninterface DialogTicketAdminFormProps {\r\n  open: boolean;\r\n  onClose: () => void;\r\n  form: null;\r\n  afterSubmit?: (data: any) => void;\r\n}\r\n\r\nexport const DialogTicketAdminForm: FC<DialogTicketAdminFormProps> = ({\r\n  open = false,\r\n  onClose,\r\n  form,\r\n  afterSubmit,\r\n}) => {\r\n  const {\r\n    form: { control, handleSubmit, setValue },\r\n    resetForm,\r\n  } = useTicketForm();\r\n\r\n  const { startLoading, endLoading, isLoading } = useLoading();\r\n  const { showErrorToast, showSuccessToast } = useToast();\r\n  const [conversation, setConversation] = useState([]);\r\n\r\n  const [reply, setReply] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    if (!open) {\r\n      resetForm();\r\n      setConversation([]);\r\n      setReply(\"\");\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [open]);\r\n\r\n  useEffect(() => {\r\n    if (form) {\r\n      const findTicketInfo = async () => {\r\n        startLoading();\r\n        try {\r\n          const [data, conv] = await Promise.all([\r\n            ticketService.getTicketInfo(form.id),\r\n            ticketService.getTicketConversation(form.id),\r\n          ]);\r\n\r\n          setConversation(conv);\r\n\r\n          const { description_text, subject } = data;\r\n\r\n          setValue(\"description\", description_text);\r\n          setValue(\"subject\", subject);\r\n        } catch (error) {\r\n          showErrorToast(error);\r\n        }\r\n\r\n        endLoading();\r\n      };\r\n      findTicketInfo();\r\n    } else {\r\n      resetForm();\r\n      setConversation([]);\r\n      setReply(\"\");\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [form]);\r\n\r\n  const onSubmit = async () => {\r\n    if (!reply) return null;\r\n\r\n    startLoading();\r\n    try {\r\n      // const data = await ticketService.createTicket(values);\r\n      const data = await ticketService.sendReply(form?.id, reply);\r\n      showSuccessToast(\"Reply sended\");\r\n\r\n      afterSubmit?.(data);\r\n    } catch (error) {\r\n      showErrorToast(error);\r\n    }\r\n    endLoading();\r\n  };\r\n\r\n  return (\r\n    <Dialog fullWidth maxWidth=\"lg\" open={open}>\r\n      <DialogTitle>Ticket</DialogTitle>\r\n      <DialogContent>\r\n        <Stack spacing={2} mt={2}>\r\n          {form?.requester?.name && (\r\n            <Controller\r\n              name=\"name\"\r\n              control={control}\r\n              render={({ field, fieldState: { error } }) => (\r\n                <TextField\r\n                  fullWidth\r\n                  label=\"*Name\"\r\n                  value={form?.requester?.name}\r\n                  disabled\r\n                />\r\n              )}\r\n            />\r\n          )}\r\n          <Controller\r\n            name=\"subject\"\r\n            control={control}\r\n            render={({ field, fieldState: { error } }) => (\r\n              <TextField\r\n                fullWidth\r\n                disabled={Boolean(form)}\r\n                label=\"*Subject\"\r\n                error={!!error}\r\n                helperText={error?.message}\r\n                {...field}\r\n              />\r\n            )}\r\n          />\r\n          <Controller\r\n            name=\"description\"\r\n            control={control}\r\n            render={({ field, fieldState: { error } }) => (\r\n              <TextField\r\n                fullWidth\r\n                label=\"*Description\"\r\n                disabled={Boolean(form)}\r\n                multiline\r\n                rows={6}\r\n                error={!!error}\r\n                helperText={error?.message}\r\n                {...field}\r\n              />\r\n            )}\r\n          />\r\n        </Stack>\r\n\r\n        {conversation.length > 0 && (\r\n          <Timeline position=\"right\">\r\n            {conversation.map((item, index) => (\r\n              <TimelineItem\r\n                key={index.toString()}\r\n                position=\"right\"\r\n                sx={{\r\n                  \"&:before\": {\r\n                    content: \"none\",\r\n                  },\r\n                }}\r\n              >\r\n                <TimelineSeparator>\r\n                  <TimelineDot color=\"primary\" />\r\n                  <TimelineConnector />\r\n                </TimelineSeparator>\r\n                <TimelineContent>\r\n                  <Typography variant=\"subtitle2\" component=\"span\">\r\n                    {item?.support_email || \"\"} (\r\n                    {` ${item?.created_at?.split(\"T\")?.[0]} `})\r\n                  </Typography>\r\n                  <Typography>{item?.body_text || \"\"}</Typography>\r\n                </TimelineContent>\r\n              </TimelineItem>\r\n            ))}\r\n          </Timeline>\r\n        )}\r\n      </DialogContent>\r\n      <DialogActions>\r\n        <Stack width=\"100%\" px={2}>\r\n          {![4, 5].includes(form?.status) && (\r\n            <TextField\r\n              fullWidth\r\n              label=\"Send a reply\"\r\n              value={reply}\r\n              onChange={(e) => setReply(e.target.value)}\r\n              multiline\r\n              rows={3}\r\n              sx={{\r\n                mt: 1,\r\n                mb: 3,\r\n              }}\r\n            />\r\n          )}\r\n          <Stack direction=\"row\" justifyContent=\"flex-end\">\r\n            <LoadingButton loading={isLoading} onClick={onClose}>\r\n              cancel\r\n            </LoadingButton>\r\n\r\n            {![4, 5].includes(form?.status) && (\r\n              <LoadingButton\r\n                loading={isLoading}\r\n                variant=\"contained\"\r\n                onClick={onSubmit}\r\n              >\r\n                send reply\r\n              </LoadingButton>\r\n            )}\r\n          </Stack>\r\n        </Stack>\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n};\r\n","import {\r\n  Container,\r\n  Stack,\r\n  Tooltip,\r\n  Button,\r\n  Typography,\r\n  Chip,\r\n} from \"@mui/material\";\r\nimport { useEffect } from \"react\";\r\nimport { ticketService } from \"../api/ticketService\";\r\nimport DataTable from \"../components/DataTable/DataTable\";\r\nimport { DialogTicketForm } from \"../components/tickets/DialogTicketForm\";\r\nimport useSelectedItem from \"../hooks/form/useSelectedItem\";\r\nimport useDialog from \"../hooks/useDialog\";\r\nimport useLoading from \"../hooks/useLoading\";\r\nimport useToast from \"../hooks/useToast\";\r\nimport eyeFill from \"@iconify/icons-eva/eye-fill\";\r\nimport ArticleIcon from \"@mui/icons-material/Article\";\r\nimport { DialogTicketAdminForm } from \"../components/tickets/DialogTicketAdminForm\";\r\n\r\nexport const statusName = {\r\n  2: \"Open\",\r\n  3: \"Pending\",\r\n  4: \"Resolved\",\r\n  5: \"Closed\",\r\n  6: \"Waiting on Customer\",\r\n  7: \"Waiting on Third Party\",\r\n};\r\n\r\nconst getStatusColor = (status) => {\r\n  switch (status) {\r\n    case 4:\r\n    case 5:\r\n      return \"success\";\r\n    default:\r\n      return \"warning\";\r\n  }\r\n};\r\n\r\nconst TABLE_HEAD = [\r\n  {\r\n    id: \"requester\",\r\n    label: \"Requester\",\r\n    value: ({ requester }: any) => requester.name || \"\",\r\n    alignRight: false,\r\n  },\r\n  {\r\n    id: \"subject\",\r\n    label: \"Subject\",\r\n    value: \"subject\",\r\n    alignRight: false,\r\n  },\r\n  {\r\n    id: \"status\",\r\n    label: \"Status\",\r\n    value: ({ status }) => (\r\n      <Chip\r\n        sx={{\r\n          color: \"#fff\",\r\n        }}\r\n        label={statusName[status]}\r\n        color={getStatusColor(status)}\r\n      />\r\n    ),\r\n    alignRight: false,\r\n  },\r\n  {\r\n    id: \"created_at\",\r\n    label: \"Send Date\",\r\n    value: ({ created_at }: any) => created_at?.split(\"T\")?.[0],\r\n    alignRight: false,\r\n  },\r\n  {\r\n    id: \"options\",\r\n    label: \"Actions\",\r\n    align: \"center\",\r\n    options: [\r\n      {\r\n        icon: eyeFill,\r\n        text: \"View details\",\r\n        onClick: (el, action) => ({\r\n          el,\r\n          action,\r\n        }),\r\n        color: \"green\",\r\n        action: \"view\",\r\n      },\r\n    ],\r\n  },\r\n];\r\n\r\nconst TicketsAdmin = () => {\r\n  const {\r\n    data,\r\n    selectedItem,\r\n    setData,\r\n    selectedIndex,\r\n    handleCloseSelectedItem,\r\n    handleSelectedItem,\r\n    handleUpdateItem,\r\n  } = useSelectedItem();\r\n\r\n  const { isOpenDialog, openDialog, closeDialog } = useDialog();\r\n  const { startLoading, endLoading, isLoading } = useLoading();\r\n  const { showErrorToast } = useToast();\r\n\r\n  useEffect(() => {\r\n    const getTickets = async () => {\r\n      startLoading();\r\n      try {\r\n        const data = await ticketService.getAllTickets();\r\n        setData(data);\r\n      } catch (error) {\r\n        showErrorToast(error);\r\n      }\r\n      endLoading();\r\n    };\r\n    getTickets();\r\n  }, []);\r\n\r\n  const handleClose = () => {\r\n    closeDialog();\r\n    handleCloseSelectedItem();\r\n  };\r\n\r\n  const handleMoreAction = (action = \"\", el) => {\r\n    switch (action) {\r\n      case \"view\":\r\n        handleSelectedItem(el);\r\n        openDialog();\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  const handleAfterSubmit = (newData) => {\r\n    // if (selectedIndex > -1) {\r\n    //   handleUpdateItem(newData);\r\n    // } else {\r\n    //   setData((state) => [...state, newData]);\r\n    // }\r\n    handleClose();\r\n  };\r\n\r\n  return (\r\n    <Container maxWidth=\"lg\">\r\n      <Stack\r\n        direction={{\r\n          xs: \"column\",\r\n          sm: \"row\",\r\n        }}\r\n        flexWrap=\"nowrap\"\r\n        justifyContent=\"space-between\"\r\n      >\r\n        <Typography variant=\"h2\" mb={2}>\r\n          Tickets\r\n        </Typography>\r\n      </Stack>\r\n\r\n      <DataTable\r\n        header={TABLE_HEAD}\r\n        data={data}\r\n        isLoading={isLoading}\r\n        handleMoreAction={handleMoreAction}\r\n      />\r\n\r\n      <DialogTicketAdminForm\r\n        open={isOpenDialog}\r\n        onClose={handleClose}\r\n        form={selectedItem}\r\n        afterSubmit={handleAfterSubmit}\r\n      />\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default TicketsAdmin;\r\n","import { useState } from \"react\";\r\n\r\nexport default function useDialog() {\r\n  const [isOpenDialog, setIsOpenDialog] = useState(false);\r\n\r\n  const openDialog = () => setIsOpenDialog(true);\r\n\r\n  const closeDialog = () => setIsOpenDialog(false);\r\n\r\n  return {\r\n    isOpenDialog,\r\n    openDialog,\r\n    closeDialog,\r\n  };\r\n}\r\n","import { useState } from \"react\";\r\n\r\nexport default function useSelectedItem() {\r\n  const [data, setData] = useState<any[]>([]);\r\n  const [selectedItem, setSelectedItem] = useState(null);\r\n  const [selectedIndex, setSelectedIndex] = useState(-1);\r\n\r\n  const handleSelectedItem = (item: any) => {\r\n    const findIndex = data.indexOf(item);\r\n\r\n    if (findIndex > -1) {\r\n      setSelectedIndex(findIndex);\r\n      setSelectedItem(item);\r\n    }\r\n  };\r\n\r\n  const handleCloseSelectedItem = () => {\r\n    setSelectedItem(null);\r\n    setSelectedIndex(-1);\r\n  };\r\n\r\n  const handleUpdateItem = (updatedItem: any) => {\r\n    const index = selectedIndex;\r\n    const copyArray = [...data];\r\n    copyArray.splice(index, 1, updatedItem);\r\n    setData(copyArray);\r\n    handleCloseSelectedItem();\r\n  };\r\n\r\n  const handleRemoveItem = () => {\r\n    const index = selectedIndex;\r\n    const copyArray = [...data];\r\n    copyArray.splice(index, 1);\r\n    setData(copyArray);\r\n    handleCloseSelectedItem();\r\n  };\r\n\r\n  return {\r\n    data,\r\n    setData,\r\n    selectedItem,\r\n    selectedIndex,\r\n    handleSelectedItem,\r\n    handleCloseSelectedItem,\r\n    handleUpdateItem,\r\n    handleRemoveItem,\r\n  };\r\n}\r\n","import axios from \"axios\";\r\n\r\nconst BASE_URL = \"https://automationempire.freshdesk.com/api/v2/tickets/\";\r\n\r\nconst fresdeskhttp = axios.create({\r\n  baseURL: BASE_URL,\r\n  headers: {\r\n    \"Content-Type\": \"application/json\",\r\n    Authorization: `Basic ` + btoa(`iaeop6p6moF6vCcZ3v:X`),\r\n  },\r\n});\r\n\r\nexport const ticketService = {\r\n  createTicket: async (form: any) => {\r\n    const { data } = await fresdeskhttp.post(\"\", form);\r\n    return data;\r\n  },\r\n  getAllTickets: async () => {\r\n    const { data } = await fresdeskhttp.get(\"?include=requester\");\r\n    return data;\r\n  },\r\n  getTicketByEmail: async (email: string) => {\r\n    const { data } = await fresdeskhttp.get(`?email=${email}`);\r\n    return data;\r\n  },\r\n  getTicketInfo: async (ticketId: number) => {\r\n    const { data } = await fresdeskhttp.get(`/${ticketId}`);\r\n    return data;\r\n  },\r\n  getTicketConversation: async (ticketId: number) => {\r\n    const { data } = await fresdeskhttp.get(`/${ticketId}/conversations`);\r\n    return data;\r\n  },\r\n  sendReply: async (ticketId: number, reply: string) => {\r\n    const { data } = await fresdeskhttp.post(`/${ticketId}/reply`, {\r\n      body: replyBody(reply),\r\n    });\r\n    return data;\r\n  },\r\n};\r\n\r\nconst replyBody = (content: string) =>\r\n  `<div style=\\\"font-family:-apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Helvetica Neue, Arial, sans-serif; font-size:14px\\\">\\n<div dir=\\\"ltr\\\">${content}\\n</div>\\n<div dir=\\\"ltr\\\"><div><br></div></div>\\n</div>`;\r\n","import { useForm } from \"react-hook-form\";\r\nimport { object, string, number } from \"yup\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\n\r\nconst schema = object({\r\n  name: string().required(\"required\"),\r\n  // email: string().email().required(\"required\"),\r\n  subject: string().required(\"required\"),\r\n  description: string().required(\"required\"),\r\n  status: number().required(\"required\"),\r\n  priority: number().required(\"required\"),\r\n});\r\n\r\nexport type TicketFormValues = {\r\n  name: string;\r\n  // email: string;\r\n  subject: string;\r\n  description: string;\r\n  status: number;\r\n  priority: number;\r\n};\r\n\r\nexport const defaultTicketFormValues: TicketFormValues = {\r\n  name: \"\",\r\n  // email: \"\",\r\n  subject: \"\",\r\n  description: \"\",\r\n  status: 2,\r\n  priority: 1,\r\n};\r\n\r\nexport default function useTicketForm() {\r\n  const form = useForm<TicketFormValues>({\r\n    resolver: yupResolver(schema),\r\n    defaultValues: defaultTicketFormValues,\r\n  });\r\n\r\n  const resetForm = () => form.reset(defaultTicketFormValues);\r\n\r\n  return {\r\n    form,\r\n    resetForm,\r\n  };\r\n}\r\n"],"sourceRoot":""}